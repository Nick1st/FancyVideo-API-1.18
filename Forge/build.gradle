import com.matyrobbrt.gradle.jarinjar.data.JiJDependencyData
import com.matyrobbrt.gradle.jarinjar.task.ForgeJarInJarTask
import net.minecraftforge.gradle.common.util.ModConfig
import net.minecraftforge.gradle.common.util.RunConfig

import java.lang.reflect.Field

//######################################################################################################################
//                                              Build Plugin Declaration
//######################################################################################################################
plugins {
    alias(libs.plugins.forgeGradle)
    alias(libs.plugins.forgeLiberian)
    alias(libs.plugins.matyjij)
}

apply from: rootProject.file('gradle/forge.gradle')
apply from: rootProject.file('gradle/jarmaker.gradle')

//######################################################################################################################
//                                                Project Dependencies
//######################################################################################################################
dependencies {
    for (Map.Entry<String, Project> entry: project(":InternalPlugins").childProjects) {
        shadowed(entry.value.childProjects.get("Forge")) {
            transitive = false
        }
    }
}

//######################################################################################################################
//                                                 Run Configurations
//######################################################################################################################
minecraft.runs.all {
    RunConfig config = (RunConfig) it
    for (Map.Entry<String, Project> entry: project(":InternalPlugins").childProjects) {
        Project theProject = entry.value.childProjects.get("Forge")
        ModConfig mod = new ModConfig(theProject, entry.key)
        List sources = new ArrayList()
        sources.add(theProject.sourceSets.main)
        mod.setSources(sources)
        config.mods.add(mod)
    }
}

minecraft {
    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client-' + minecraft_version_max_forge
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
//                    source project(":Common").sourceSets.main //This doesn't seem to be needed actually
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server-' + minecraft_version_max_forge
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
//                    source project(":Common").sourceSets.main //This doesn't seem to be needed actually
                }
            }
        }
    }
}

//######################################################################################################################
//                                                    Build Tasks
//######################################################################################################################
tasks.register('shadowedJar', ForgeJarInJarTask) {
    group('build')
    from(sourceSets.main.output)
    fromConfiguration(project.configurations.shadowed)
    tasks.build.dependsOn(it)
}

jij.onConfiguration(project.configurations.shadowed) {
    eachMatching('.+') {
        versionRange libs.vlcj.get().versionConstraint.requiredVersion
        filterContents {
            exclude 'module-info.class'
        }
    }
    eachMatching("de\\.nick1st\\.fancyvideo.*") {
        // TODO Fix metadata (artifactID and obfuscation)
        JiJDependencyData data = (JiJDependencyData) it
        artifactId project.parent.name
        setObfuscated(true)
    }
}

reobf {
    shadowedJar {}
}

//jar.finalizedBy('reobfJar')
shadowedJar.finalizedBy('reobfShadowedJar')

//######################################################################################################################
//                                                      Publish
//######################################################################################################################
publishing { // TODO Fix this
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar

            pom {
                name = "${(mod_name as String).replaceAll('-', ' ')}"
                description = "${mod_description}"
                url = "https://www.curseforge.com/minecraft/mc-mods/${(project.mod_name as String).toLowerCase()}"
                licenses {
                    license {
                        name = "${license}"
                        url = "${license_url}"
                    }
                }
                developers {
                    developer {
                        id = author
                        name = author
                        email = author_email
                    }
                }
                scm {
                    url = "https://github.com/Nick1st/${mod_name + "-1.18"}"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = project.hasProperty('mavenUsername') ? mavenUsername : ""
                password = project.hasProperty('mavenPassword') ? mavenPassword : ""
            }
            authentication {
                basic(BasicAuthentication)
            }
            name = "nick1st-repository-releases"
            url = "https://maven.nick1st.de/releases"
        }
    }
}

publish.dependsOn('reobfJar')